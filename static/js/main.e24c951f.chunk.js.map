{"version":3,"sources":["Table.js","App.js","serviceWorker.js","index.js"],"names":["Table","state","data","console","log","JSON","parse","this","setState","result","no","effectiveDate","table","rates","map","val","idx","key","currency","code","mid","class","Component","App","displayTable","changeTable","slogan","className","Button","variant","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gTA8DeA,E,4MA1DXC,MAAQ,CACJC,KAAM,I,kLASdC,QAAQC,IAAI,qBACAF,EAAOG,KAAKC,MAAM,ynEACtBC,KAAKC,SAAS,CAAEN,KAAMA,I,qIAIhB,IACEA,EAASK,KAAKN,MAAdC,KACJO,EAAS,GACTC,EAAK,KACLC,EAAgB,KAChBC,EAAQ,KAEZ,GAAIV,EAAK,GACDU,EAAQV,EAAK,GAAGU,MAChBF,EAAKR,EAAK,GAAGQ,GACbC,EAAgBT,EAAK,GAAGS,cACxBF,EAASP,EAAK,GAAGW,MAAMC,KAAI,SAACC,EAAKC,GACjC,OAAO,wBAAIC,IAAKD,GACR,4BAAKD,EAAIG,UACT,4BAAKH,EAAII,MACT,4BAAKJ,EAAIK,SAKzB,OACI,6BACI,qCAAWR,GACX,kCAAQF,GACR,oCAAUC,GACV,2BAAOU,MAAM,mCACL,2BAAOA,MAAM,cACT,4BACI,wCACA,uCACA,uCAGR,+BACKZ,S,GAnDTa,a,QC8BLC,E,4MA1BbtB,MAAQ,CACNuB,cAAc,G,EAoBhBC,YAAc,WACV,EAAKjB,SAAS,CAAEgB,cAAe,EAAKvB,MAAMuB,gB,uDAlBpC,IAAD,SACkBjB,KAAKN,MADvB,EACCyB,OADD,EACSxB,KAEhB,OACE,yBAAKyB,UAAU,OACb,6BAEA,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAAS,kBAAM,EAAKL,gBAA9C,sBAAiFlB,KAAKN,MAAMuB,cAAgB,oCAAiBjB,KAAKN,MAAMuB,cAAgB,qCAAxJ,KAEA,6BACA,6BAECjB,KAAKN,MAAMuB,cAAe,kBAAC,EAAD,W,GAlBjBF,aCOES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCNNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.e24c951f.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Nbp from './Nbp.js';\n\nclass Table extends Component {\n    state = {\n        data: []\n      }\n\n    async componentDidMount() {\n        // var nbp = new Nbp();\n        // var promise = nbp.getLastCurrencyTable('A')\n        // promise.then(resp => {\n        //     this.setState({ data: resp });\n        // });\nconsole.log('componentDidMount');\n        var data = JSON.parse('[{\"table\":\"A\",\"no\":\"085/A/NBP/2020\",\"effectiveDate\":\"2020-05-04\",\"rates\":[{\"currency\":\"bat (Tajlandia)\",\"code\":\"THB\",\"mid\":0.1285},{\"currency\":\"dolar amerykański\",\"code\":\"USD\",\"mid\":4.1646},{\"currency\":\"dolar australijski\",\"code\":\"AUD\",\"mid\":2.6712},{\"currency\":\"dolar Hongkongu\",\"code\":\"HKD\",\"mid\":0.5372},{\"currency\":\"dolar kanadyjski\",\"code\":\"CAD\",\"mid\":2.9534},{\"currency\":\"dolar nowozelandzki\",\"code\":\"NZD\",\"mid\":2.5209},{\"currency\":\"dolar singapurski\",\"code\":\"SGD\",\"mid\":2.9412},{\"currency\":\"euro\",\"code\":\"EUR\",\"mid\":4.5582},{\"currency\":\"forint (Węgry)\",\"code\":\"HUF\",\"mid\":0.0129},{\"currency\":\"frank szwajcarski\",\"code\":\"CHF\",\"mid\":4.3216},{\"currency\":\"funt szterling\",\"code\":\"GBP\",\"mid\":5.1780},{\"currency\":\"hrywna (Ukraina)\",\"code\":\"UAH\",\"mid\":0.1543},{\"currency\":\"jen (Japonia)\",\"code\":\"JPY\",\"mid\":0.039011},{\"currency\":\"korona czeska\",\"code\":\"CZK\",\"mid\":0.1674},{\"currency\":\"korona duńska\",\"code\":\"DKK\",\"mid\":0.6109},{\"currency\":\"korona islandzka\",\"code\":\"ISK\",\"mid\":0.028614},{\"currency\":\"korona norweska\",\"code\":\"NOK\",\"mid\":0.4000},{\"currency\":\"korona szwedzka\",\"code\":\"SEK\",\"mid\":0.4205},{\"currency\":\"kuna (Chorwacja)\",\"code\":\"HRK\",\"mid\":0.6011},{\"currency\":\"lej rumuński\",\"code\":\"RON\",\"mid\":0.9416},{\"currency\":\"lew (Bułgaria)\",\"code\":\"BGN\",\"mid\":2.3305},{\"currency\":\"lira turecka\",\"code\":\"TRY\",\"mid\":0.5930},{\"currency\":\"nowy izraelski szekel\",\"code\":\"ILS\",\"mid\":1.1769},{\"currency\":\"peso chilijskie\",\"code\":\"CLP\",\"mid\":0.004989},{\"currency\":\"peso filipińskie\",\"code\":\"PHP\",\"mid\":0.0823},{\"currency\":\"peso meksykańskie\",\"code\":\"MXN\",\"mid\":0.1682},{\"currency\":\"rand (Republika Południowej Afryki)\",\"code\":\"ZAR\",\"mid\":0.2214},{\"currency\":\"real (Brazylia)\",\"code\":\"BRL\",\"mid\":0.7591},{\"currency\":\"ringgit (Malezja)\",\"code\":\"MYR\",\"mid\":0.9653},{\"currency\":\"rubel rosyjski\",\"code\":\"RUB\",\"mid\":0.0552},{\"currency\":\"rupia indonezyjska\",\"code\":\"IDR\",\"mid\":0.0002758},{\"currency\":\"rupia indyjska\",\"code\":\"INR\",\"mid\":0.055094},{\"currency\":\"won południowokoreański\",\"code\":\"KRW\",\"mid\":0.003401},{\"currency\":\"yuan renminbi (Chiny)\",\"code\":\"CNY\",\"mid\":0.5897},{\"currency\":\"SDR (MFW)\",\"code\":\"XDR\",\"mid\":5.7387}]}]');\n        this.setState({ data: data });\n    }\n\n\n    render() {\n        const { data } = this.state;\n        var result = [];\n        var no = null;\n        var effectiveDate = null;\n        var table = null;\n\n        if (data[0]) {\n            var table = data[0].table;\n            var no = data[0].no;\n            var effectiveDate = data[0].effectiveDate;\n            var result = data[0].rates.map((val, idx) => {\n                return <tr key={idx}>\n                        <td>{val.currency}</td>\n                        <td>{val.code}</td>\n                        <td>{val.mid}</td>\n                    </tr>\n            })\n        }\n        \n        return (\n            <div>\n                <p>Table: {table}</p>\n                <p>No: {no}</p>\n                <p>Date: {effectiveDate}</p>\n                <table class='table table-striped table-hover'>\n                        <thead class=\"thead-dark\">\n                            <tr>\n                                <th>Currency</th>\n                                <th>Country</th>\n                                <th>Cours</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {result}\n                        </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nexport default Table\n","import React, { Component } from 'react';\nimport './App.css';\nimport Table from './Table.js';\nimport { Button } from 'react-bootstrap';\n\nclass App extends Component {\n\n  state = {\n    displayTable: false\n  }\n\n  render() {\n    const { slogan, data } = this.state;\n\n    return (\n      <div className=\"App\">\n        <br/>\n        \n        <Button variant=\"primary\" onClick={() => this.changeTable()}>Table A - latest [{!this.state.displayTable && <span>on</span>}{this.state.displayTable && <span>off</span>}]</Button>\n        \n        <br/>\n        <br/>\n\n        {this.state.displayTable &&<Table />} \n      </div>    \n    );\n  }\n\n  changeTable = () => {\n      this.setState({ displayTable: !this.state.displayTable });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","//CSS\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\n// React and JS \nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}